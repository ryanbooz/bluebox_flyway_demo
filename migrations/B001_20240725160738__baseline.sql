-- Script generated by Redgate Compare v1.21.2.22957
SET check_function_bodies = false;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating postgis...';END$$;
CREATE EXTENSION postgis WITH SCHEMA public VERSION '3.4.0';


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating pg_trgm...';END$$;
CREATE EXTENSION pg_trgm WITH SCHEMA public VERSION '1.6';


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating pg_stat_statements...';END$$;
CREATE EXTENSION pg_stat_statements WITH SCHEMA public VERSION '1.10';


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.c_inv...';END$$;
CREATE TABLE public.c_inv (
    inventory_id integer
);
ALTER TABLE public.c_inv OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.zip_code_info...';END$$;
CREATE TABLE bluebox.zip_code_info (
    zip_code integer NOT NULL,
    lat real,
    lng real,
    city character varying(50),
    state_id character varying(50),
    state_name character varying(50),
    zcta boolean,
    parent_zcta character varying(50),
    population integer,
    density real,
    county_fips integer,
    county_name character varying(50),
    county_weights character varying(128),
    county_names_all character varying(64),
    county_fips_all character varying(50),
    imprecise boolean,
    military boolean,
    timezone character varying(50),
    geog public.geography(Point,4326)
);
ALTER TABLE bluebox.zip_code_info ADD CONSTRAINT zip_code_info_pk PRIMARY KEY (zip_code);
ALTER TABLE bluebox.zip_code_info OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.store...';END$$;
CREATE TABLE bluebox.store (
    store_id bigint NOT NULL,
    street_name text,
    road_ref text,
    phone text,
    zip_code integer,
    geog public.geography(Point,4326)
);
ALTER TABLE bluebox.store ADD CONSTRAINT store_pkey PRIMARY KEY (store_id);
ALTER TABLE bluebox.store OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental...';END$$;
CREATE TABLE bluebox.rental (
    rental_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    rental_period tstzrange,
    inventory_id integer NOT NULL,
    customer_id integer NOT NULL,
    last_update timestamp with time zone NOT NULL DEFAULT now(),
    store_id integer
);
ALTER TABLE bluebox.rental ADD CONSTRAINT rental_pkey PRIMARY KEY (rental_id);
ALTER TABLE bluebox.rental OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.release_type...';END$$;
CREATE TABLE bluebox.release_type (
    release_type_id integer NOT NULL,
    release_type text NOT NULL
);
ALTER TABLE bluebox.release_type ADD CONSTRAINT release_type_pkey PRIMARY KEY (release_type_id);
ALTER TABLE bluebox.release_type OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.production_company...';END$$;
CREATE TABLE bluebox.production_company (
    production_company_id bigint NOT NULL,
    production_company_name text NOT NULL
);
ALTER TABLE bluebox.production_company ADD CONSTRAINT production_company_pkey PRIMARY KEY (production_company_id);
ALTER TABLE bluebox.production_company OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.person...';END$$;
CREATE TABLE bluebox.person (
    person_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL,
    also_known_as text[],
    birth_date date,
    death_date date,
    gender integer,
    popularity real,
    imdb_id text,
    biography text
);
ALTER TABLE bluebox.person ADD CONSTRAINT person_pkey PRIMARY KEY (person_id);
ALTER TABLE bluebox.person OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.holiday...';END$$;
CREATE TABLE bluebox.holiday (
    id bigint NOT NULL,
    holiday_name text,
    is_paid_time_off boolean,
    holiday_date date
);
ALTER TABLE bluebox.holiday OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_production_company...';END$$;
CREATE TABLE bluebox.film_production_company (
    film_id bigint NOT NULL,
    production_company_id bigint NOT NULL
);
ALTER TABLE bluebox.film_production_company ADD CONSTRAINT film_production_company_pk PRIMARY KEY (film_id, production_company_id);
ALTER TABLE bluebox.film_production_company OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_genre...';END$$;
CREATE TABLE bluebox.film_genre (
    genre_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    name text
);
ALTER TABLE bluebox.film_genre ADD CONSTRAINT genre_pkey PRIMARY KEY (genre_id);
ALTER TABLE bluebox.film_genre OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_crew...';END$$;
CREATE TABLE bluebox.film_crew (
    film_id bigint NOT NULL,
    person_id bigint NOT NULL,
    department text,
    job text
);
ALTER TABLE bluebox.film_crew ADD CONSTRAINT film_crew_pk PRIMARY KEY (film_id, person_id);
ALTER TABLE bluebox.film_crew OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_cast...';END$$;
CREATE TABLE bluebox.film_cast (
    film_id bigint NOT NULL,
    person_id bigint NOT NULL,
    film_character text NOT NULL
);
ALTER TABLE bluebox.film_cast ADD CONSTRAINT film_cast_pk PRIMARY KEY (film_id, person_id);
ALTER TABLE bluebox.film_cast OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.customer...';END$$;
CREATE TABLE bluebox.customer (
    customer_id bigint NOT NULL,
    store_id integer NOT NULL,
    full_name text NOT NULL,
    email text,
    phone text,
    zip_code integer,
    activebool boolean NOT NULL DEFAULT true,
    create_date date NOT NULL DEFAULT CURRENT_DATE,
    geog public.geography(Point,4326),
    last_update timestamp with time zone DEFAULT now()
);
ALTER TABLE bluebox.customer ADD CONSTRAINT customer_pkey PRIMARY KEY (customer_id);
ALTER TABLE bluebox.customer OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.test_func(numeric, numeric, integer)...';END$$;
CREATE FUNCTION public.test_func(IN min_val numeric, IN numeric, IN integer)
RETURNS numeric
LANGUAGE plpgsql
AS $_$
 DECLARE
 	value NUMERIC = random()* (min_val - $2) + $2;
BEGIN
   IF round_to = 0 THEN 
	 RETURN floor(value);
   ELSE 
   	 RETURN round(value,round_to);
   END IF;
END
$_$;
ALTER FUNCTION public.test_func(IN min_val numeric, IN numeric, IN integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.t2()...';END$$;
CREATE FUNCTION public.t2()
RETURNS text
LANGUAGE plpgsql
AS $_$
BEGIN
	SELECT 'hello';
END
$_$;
ALTER FUNCTION public.t2() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.random_between(numeric, numeric, integer)...';END$$;
CREATE FUNCTION public.random_between(IN min_val numeric, IN max_val numeric, IN round_to integer DEFAULT 0)
RETURNS numeric
LANGUAGE plpgsql
AS $_$
 DECLARE
 	value NUMERIC = random()* (min_val - max_val) + max_val;
BEGIN
   IF round_to = 0 THEN 
	 RETURN floor(value);
   ELSE 
   	 RETURN round(value,round_to);
   END IF;
END
$_$;
ALTER FUNCTION public.random_between(IN min_val numeric, IN max_val numeric, IN round_to integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.last_updated()...';END$$;
CREATE FUNCTION public.last_updated()
RETURNS trigger
LANGUAGE plpgsql
AS $_$
BEGIN
    NEW.last_update = CURRENT_TIMESTAMP;
    RETURN NEW;
END $_$;
ALTER FUNCTION public.last_updated() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.last_day(timestamp with time zone)...';END$$;
CREATE FUNCTION public.last_day(IN timestamp with time zone)
RETURNS date
LANGUAGE sql
IMMUTABLE
AS $_$
  SELECT CASE
    WHEN EXTRACT(MONTH FROM $1) = 12 THEN
      (((EXTRACT(YEAR FROM $1) + 1) operator(pg_catalog.||) '-01-01')::date - INTERVAL '1 day')::date
    ELSE
      ((EXTRACT(YEAR FROM $1) operator(pg_catalog.||) '-' operator(pg_catalog.||) (EXTRACT(MONTH FROM $1) + 1) operator(pg_catalog.||) '-01')::date - INTERVAL '1 day')::date
    END
$_$;
ALTER FUNCTION public.last_day(IN timestamp with time zone) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.inventory_in_stock(integer)...';END$$;
CREATE FUNCTION public.inventory_in_stock(IN p_inventory_id integer)
RETURNS boolean
LANGUAGE plpgsql
AS $_$
DECLARE
    v_rentals INTEGER;
    v_out     INTEGER;
BEGIN
    -- AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
    -- FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED

    SELECT count(*) INTO v_rentals
    FROM rental
    WHERE inventory_id = p_inventory_id;

    IF v_rentals = 0 THEN
      RETURN TRUE;
    END IF;

    SELECT COUNT(rental_id) INTO v_out
    FROM inventory LEFT JOIN rental USING(inventory_id)
    WHERE inventory.inventory_id = p_inventory_id
    AND upper(rental.rental_period) IS NULL;

    IF v_out > 0 THEN
      RETURN FALSE;
    ELSE
      RETURN TRUE;
    END IF;
END $_$;
ALTER FUNCTION public.inventory_in_stock(IN p_inventory_id integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.inventory_held_by_customer(integer)...';END$$;
CREATE FUNCTION public.inventory_held_by_customer(IN p_inventory_id integer)
RETURNS integer
LANGUAGE plpgsql
AS $_$
DECLARE
    v_customer_id INTEGER;
BEGIN

  SELECT customer_id INTO v_customer_id
  FROM rental
  WHERE return_date IS NULL
  AND inventory_id = p_inventory_id;

  RETURN v_customer_id;
END $_$;
ALTER FUNCTION public.inventory_held_by_customer(IN p_inventory_id integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.get_inventory()...';END$$;
CREATE FUNCTION public.get_inventory()
RETURNS TABLE(film_id bigint, popularity real, total_i integer[], x numeric)
LANGUAGE plpgsql
AS $_$
BEGIN
	RETURN query 
	WITH inventory_tmp (film_id, popularity, total_i, release_date) AS (
	SELECT f.film_id, f.popularity, CASE
		WHEN f.popularity <= 20 THEN ARRAY[0,2]
		WHEN f.popularity BETWEEN 20 AND 35 THEN ARRAY[0,2]
		WHEN f.popularity BETWEEN 35 AND 75 THEN ARRAY[1,3]
		WHEN f.popularity BETWEEN 75 AND 100 THEN ARRAY[2,6]
		WHEN f.popularity BETWEEN 100 AND 500 THEN ARRAY[3,6]
		WHEN f.popularity >500 THEN ARRAY[6,10]
		END,
		release_date
	FROM film f
),
adjusted_inventory AS (
	SELECT it.film_id, it.popularity, 
	CASE 
		WHEN release_date > now()-'1 year'::INTERVAL THEN it.total_i
		WHEN release_date BETWEEN now()-'3 years'::INTERVAL AND now()-'1 year'::INTERVAL THEN
			array_agg(greatest(val-1,0))
		WHEN release_date BETWEEN now()-'4 years'::INTERVAL AND now()-'3 year'::INTERVAL THEN
			array_agg(greatest(val-2,0))
		WHEN release_date < now()-'3 years'::INTERVAL THEN
			array_agg(greatest(val-3,0))
	END AS total_i
	FROM inventory_tmp it, unnest(it.total_i) AS val
	GROUP BY it.film_id, it.popularity, it.release_date, it.total_i
)
SELECT ai.film_id, ai.popularity, ai.total_i, x.i FROM adjusted_inventory ai, random_between(ai.total_i[1],ai.total_i[2]) x(i);

END; $_$;
ALTER FUNCTION public.get_inventory() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.get_customer_balance(integer, timestamp with time zone)...';END$$;
CREATE FUNCTION public.get_customer_balance(IN p_customer_id integer, IN p_effective_date timestamp with time zone)
RETURNS numeric
LANGUAGE plpgsql
AS $_$
       --#OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       --#THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       --#   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       --#   2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
       --#   3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
       --#   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED
DECLARE
    v_rentfees DECIMAL(5,2); --#FEES PAID TO RENT THE VIDEOS INITIALLY
    v_overfees INTEGER;      --#LATE FEES FOR PRIOR RENTALS
    v_payments DECIMAL(5,2); --#SUM OF PAYMENTS MADE PREVIOUSLY
BEGIN
    SELECT COALESCE(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film, inventory, rental
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

    SELECT COALESCE(SUM(IF((rental.return_date - rental.rental_date) > (film.rental_duration * '1 day'::interval),
        ((rental.return_date - rental.rental_date) - (film.rental_duration * '1 day'::interval)),0)),0) INTO v_overfees
    FROM rental, inventory, film
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

    SELECT COALESCE(SUM(payment.amount),0) INTO v_payments
    FROM payment
    WHERE payment.payment_date <= p_effective_date
    AND payment.customer_id = p_customer_id;

    RETURN v_rentfees + v_overfees - v_payments;
END
$_$;
ALTER FUNCTION public.get_customer_balance(IN p_customer_id integer, IN p_effective_date timestamp with time zone) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.film_not_in_stock(integer, integer)...';END$$;
CREATE FUNCTION public.film_not_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer)
RETURNS SETOF integer
LANGUAGE sql
AS $_$
    SELECT inventory_id
    FROM inventory
    WHERE film_id = $1
    AND store_id = $2
    AND NOT inventory_in_stock(inventory_id);
$_$;
ALTER FUNCTION public.film_not_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.film_in_stock(integer, integer)...';END$$;
CREATE FUNCTION public.film_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer)
RETURNS SETOF integer
LANGUAGE sql
AS $_$
     SELECT inventory_id
     FROM inventory
     WHERE film_id = $1
     AND store_id = $2
     AND inventory_in_stock(inventory_id);
$_$;
ALTER FUNCTION public.film_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public._group_concat(text, text)...';END$$;
CREATE FUNCTION public._group_concat(IN text, IN text)
RETURNS text
LANGUAGE sql
IMMUTABLE
AS $_$
SELECT CASE
  WHEN $2 IS NULL THEN $1
  WHEN $1 IS NULL THEN $2
  ELSE $1 || ', ' || $2
END
$_$;
ALTER FUNCTION public._group_concat(IN text, IN text) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.group_concat(text)...';END$$;
CREATE AGGREGATE public.group_concat(text) (
    SFUNC = public._group_concat,
    STYPE = text
);
ALTER AGGREGATE public.group_concat(text) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.update_movie_rating()...';END$$;
CREATE PROCEDURE bluebox.update_movie_rating()
LANGUAGE plpgsql
AS $_$
BEGIN 
	UPDATE bluebox.film SET rating = y.mpaa::mpaa_rating
	FROM (
		SELECT film_id, trim(x->>'certification') mpaa, x->>'type' type FROM staging.release_date rd, jsonb_array_elements(releases) x
		WHERE x->>'iso_3166_1' = 'US'
		--AND (x->>'type')::int = 3
		AND (x->>'certification') != ''
		AND film_id IN (SELECT film_id FROM film WHERE rating IS NULL)	
		) y 
	WHERE film.film_id = y.film_id;
END;
$_$;
ALTER PROCEDURE bluebox.update_movie_rating() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.move_cast_and_crew()...';END$$;
CREATE PROCEDURE bluebox.move_cast_and_crew()
LANGUAGE plpgsql
AS $_$
BEGIN
	/*
	 * Hopefully not needed anymore, but keeping for safety. At some
	 * points during development films would exist in the staging tables
	 * but not in the main table, which should happen. In most cases I checked
	 * the films weren't of value anyway, and I suspected that IDs changed between
	 * API runs over a few months of development (and not cleaning old record
	 * up along the way)
	 */
	DELETE FROM staging.film_crew WHERE film_id IN (
	SELECT DISTINCT(fc.film_id) FROM
		staging.film_crew fc
		LEFT JOIN public.film f USING (film_id)
		WHERE f.film_id IS NULL 
	);
	
	DELETE FROM staging.film_cast WHERE film_id IN (
	SELECT DISTINCT(fc.film_id) FROM
		staging.film_cast fc
		LEFT JOIN public.film f USING (film_id)
		WHERE f.film_id IS NULL 
	);
	
	/*
	 * Now insert any crew records that don't exist in the main 
	 * film_crew table or film_cast table
	 */
	INSERT INTO bluebox.film_crew (film_id, person_id, department, job)
	SELECT film_id, person_id, fc.department, fc.job FROM staging.film_crew fc
		LEFT JOIN bluebox.film_crew fc1 using(film_id, person_id)
	WHERE fc1.person_id IS NULL AND fc1.film_id IS NULL;
	
	
	INSERT INTO bluebox.film_cast (film_id, person_id, film_character)
	SELECT film_id, person_id, fc.film_character FROM staging.film_cast fc
		LEFT JOIN bluebox.film_cast fc1 using(film_id,person_id)
	WHERE fc1.person_id IS NULL AND fc1.film_id IS NULL;
END;
$_$;
ALTER PROCEDURE bluebox.move_cast_and_crew() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.insert_single_payment(integer)...';END$$;
CREATE PROCEDURE bluebox.insert_single_payment(IN rid integer)
LANGUAGE plpgsql
AS $_$	
 DECLARE
 	rental_rate float4 = 1.99;
 BEGIN 
	WITH payment_info AS (
		SELECT rental_id, rental_period, GREATEST(CEILING(EXTRACT(epoch from (upper(rental_period)-lower(rental_period)))/3600/24),1) rental_days,
			inventory_id, customer_id, upper(rental_period) AS payment_date
		FROM bluebox.rental r
			INNER JOIN bluebox.inventory i USING(inventory_id)
			INNER JOIN bluebox.film f USING(film_id)
		WHERE r.rental_id = rid
	)
	INSERT INTO bluebox.payment (customer_id, rental_id, amount, payment_date)
	SELECT customer_id, rental_id, rental_days*rental_rate AS amount, payment_date
		FROM payment_info;
	
	END;
$_$;
ALTER PROCEDURE bluebox.insert_single_payment(IN rid integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.insert_payments(date)...';END$$;
CREATE PROCEDURE bluebox.insert_payments(IN rd date)
LANGUAGE plpgsql
AS $_$	
 DECLARE
 	rental_rate float4 = 1.99;
 BEGIN 
	WITH payment_info AS (
		SELECT r.rental_id, rental_period, GREATEST(CEILING(EXTRACT(epoch from (upper(rental_period)-lower(rental_period)))/3600/24),1) rental_days,
			inventory_id, r.customer_id, upper(rental_period) AS payment_date
		FROM bluebox.rental r
			INNER JOIN bluebox.inventory i USING(inventory_id)
			INNER JOIN bluebox.film f USING(film_id)
			LEFT JOIN bluebox.payment p ON r.rental_id = p.rental_id
		WHERE lower(rental_period) >= rd AND lower(rental_period) <= rd+'5 days'::INTERVAL
		AND p.rental_id IS NULL 
	)
	INSERT INTO bluebox.payment (customer_id, rental_id, amount, payment_date)
	SELECT customer_id, rental_id, rental_days*rental_rate AS amount, payment_date
		FROM payment_info;
	
	END;
$_$;
ALTER PROCEDURE bluebox.insert_payments(IN rd date) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.generate_rental_history(timestamp with time zone, timestamp with time zone, numeric, double)...';END$$;
CREATE PROCEDURE bluebox.generate_rental_history(IN data_start timestamp with time zone, IN data_end timestamp with time zone, IN max_cust_pct numeric DEFAULT 2.5, IN holiday_multiplier double precision DEFAULT 2.5)
LANGUAGE plpgsql
AS $_$
 DECLARE cus record;
	c_inv int;
	a_inv int[];
	rental_start timestamptz;
    rental_nextday timestamptz;
    rental_period_lower timestamptz;
    rental_period_upper timestamptz;
	cust_percent float4 = 1.2;
	cid bigint;
	total_cus bigint;
 BEGIN
	 
	IF data_start > data_end THEN
		RAISE EXCEPTION 'End date must be after start date!';
	END IF;
	
	IF (data_end-data_start) > '365 days'::INTERVAL THEN
		RAISE EXCEPTION 'You can only do one year at time! %', (data_end-data_start);
	END IF;

	rental_start = data_start;

	CREATE TEMPORARY TABLE IF NOT EXISTS tmp_av_customer(LIKE bluebox.customer INCLUDING ALL);
	CREATE TEMPORARY TABLE IF NOT EXISTS tmp_av_inventory (LIKE bluebox.inventory INCLUDING ALL);

--	CREATE INDEX tmp_av_inventory_id ON tmp_av_inventory (inventory_id);

	WHILE rental_start <= data_end THEN
	LOOP -- daily LOOP FOR rentals
		a_inv := null;
		-- precautionary if they existed or some reason
		TRUNCATE tmp_av_customer;
		TRUNCATE tmp_av_inventory; 
	
	
	-- this is used during the INSERT and pulled out here for visibility
		rental_nextday = rental_start + '1 day'::INTERVAL;
		SELECT pct INTO cust_percent FROM random_between(0.8,max_cust_pct,3) x(pct);
		
--		RAISE NOTICE 'rental_start: %', rental_start;
--		RAISE NOTICE 'rental_nextday: %', rental_nextday;
	--	RAISE NOTICE 'data_end: %', data_end;	

		IF EXISTS (SELECT 1 FROM bluebox.holiday WHERE holiday_date::timestamptz <@ tstzrange(rental_start,rental_nextday)) THEN 
			SELECT pct INTO cust_percent FROM random_between(2.6,(cust_percent*holiday_multiplier)::numeric,3) x(pct);
		END IF;
	
		--RAISE NOTICE 'customer pct: %', cust_percent;		
	
		-- Get a list of inventory that is currently on loan as of the rental_start day
		WITH outstanding_rentals AS MATERIALIZED (
			SELECT * FROM bluebox.rental
			WHERE rental_period @> tstzrange(rental_start, rental_nextday)
		),
		-- get a list of inventory that is available
		available_inventory AS (
			INSERT INTO tmp_av_inventory
			SELECT i.* FROM bluebox.inventory i
				INNER JOIN film f USING(film_id)
				LEFT JOIN outstanding_rentals o using(inventory_id)
			WHERE o.inventory_id IS NULL
				AND release_date <= rental_start::date
		)
		--SELECT * FROM available_inventory;
		-- get a list of customers that do not currently have a video on loan
		-- as of today
		INSERT INTO tmp_av_customer
		SELECT c.* FROM bluebox.customer c
		 	LEFT JOIN outstanding_rentals o using(customer_id)
		WHERE o.customer_id IS NULL;
		 
		ANALYZE tmp_av_inventory;
		ANALYZE tmp_av_customer;
		-- sample 3% of the rows from available customers for the given day 
		-- loop over them and
--	 	SELECT count(*) INTO total_cus FROM tmp_av_customer TABLESAMPLE bernoulli(cust_percent);
--		RAISE NOTICE 'total customer to generate rentals for: %', total_cus;
--	
--		SELECT count(*) INTO total_cus FROM tmp_av_inventory;
--		RAISE NOTICE 'total inventory: %', total_cus;
	 	
		FOR cus IN (SELECT customer_id, store_id FROM tmp_av_customer TABLESAMPLE bernoulli(cust_percent))
	 	LOOP
		 	cid := cus.store_id;
		 	-- This is not efficient on larger tables. For a small table like this
		 	-- using 'random()' to order is faster and easier than a multi-step search
		 	WITH rental_store_inv AS (
				SELECT s.store_id, ST_Distance(s.geog,c.geog) dist FROM bluebox.store s,
					bluebox.customer c
				WHERE ST_DWithin(s.geog,c.geog,25000)
					AND c.customer_id = cus.customer_id
				ORDER BY random()
				LIMIT 1
			)
			SELECT store_id INTO cus.store_id FROM rental_store_inv;
		
			IF(cus.store_id IS NULL) THEN
				cus.store_id := cid;
			END IF;
	 	
		 	SELECT inventory_id INTO c_inv FROM tmp_av_inventory ai
		 		WHERE inventory_id NOT IN (SELECT UNNEST(a_inv))
		 			AND ai.store_id = cus.store_id
		 		ORDER BY random()
		 		LIMIT 1;
		 	
		 	--RAISE NOTICE 'customer_id: %, inventory_id: %, store_id: %',cus.customer_id, c_inv, cus.store_id;
		 	
			WITH return_store_inv AS (
				SELECT s.store_id, ST_Distance(s.geog,c.geog) dist FROM bluebox.store s,
					bluebox.customer c
				WHERE ST_DWithin(s.geog,c.geog,25000)
					AND c.customer_id = cus.customer_id
				ORDER BY random()
				LIMIT 1
			)
			SELECT COALESCE(store_id, cus.store_id) INTO cus.store_id FROM return_store_inv;		 	
		 	
			IF(cus.store_id IS NULL) THEN
				cus.store_id := cid;
			END IF;		
		
		 	--RAISE NOTICE 'Return Store: customer_id: %, inventory_id: %, store_id: %',cus.customer_id, c_inv, cus.store_id;
			
			rental_period_lower = (rental_start + trunc(random() * 1439) * '1 minute'::INTERVAL);
			rental_period_upper = (rental_period_lower + trunc(random() * 1440) * '1 minute'::INTERVAL);
		
			-- Sometimes loading history can deplete a "store" of inventory. For now, just skip it and
			-- catch up on future dates. Will need to populate stores with more inventory to compensate
			IF c_inv IS NOT NULL THEN 
			 	INSERT INTO bluebox.rental (rental_period, inventory_id, customer_id, store_id)
			 	SELECT tstzrange(rental_period_lower,rental_period_upper) rental_period,
					c_inv,
					cus.customer_id,
					cus.store_id;
			END IF;
			 
			COMMIT;
		
			a_inv := array_append(a_inv, c_inv);
			
	 	end LOOP;
		
	    COMMIT;
		
		CALL bluebox.insert_payments(rental_start::date);
	
		rental_start = rental_nextday;
		
	
		RAISE NOTICE 'Next day: %', rental_start;
	
	end LOOP; -- WHILE LOOP

 END;
$_$;
ALTER PROCEDURE bluebox.generate_rental_history(IN data_start timestamp with time zone, IN data_end timestamp with time zone, IN max_cust_pct numeric, IN holiday_multiplier double precision) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.generate_new_rentals(interval, real, real, integer)...';END$$;
CREATE PROCEDURE bluebox.generate_new_rentals(IN rental_interval interval DEFAULT '00:05:00'::interval, IN cust_percent real DEFAULT 0.025, IN holiday_multiplier real DEFAULT 2.5, IN max_store_dist integer DEFAULT 25000)
LANGUAGE plpgsql
AS $_$
 DECLARE cus record;
	c_inv int;
	a_inv int[];
	rental_start timestamptz;
    rental_nextday timestamptz;
    rental_range tstzrange;
	sqlstr TEXT;
	pid int;
	tmp_cust_tablename TEXT;
	tmp_inv_tablename TEXT;
 BEGIN

	SELECT pg_backend_pid() INTO pid; 
	
	tmp_cust_tablename = 'tmp_av_customer_' || pid::TEXT;
	tmp_inv_tablename = 'tmp_av_inventory_' || pid::TEXT;
	 
	EXECUTE 'CREATE TEMPORARY TABLE ' || tmp_cust_tablename || ' (LIKE bluebox.customer INCLUDING ALL)';
	EXECUTE 'CREATE TEMPORARY TABLE ' || tmp_inv_tablename || ' (LIKE bluebox.inventory INCLUDING ALL)';
	EXECUTE 'CREATE INDEX tmp_av_inventory_id_' || pid::TEXT || ' ON ' || tmp_inv_tablename || '(inventory_id)';
	EXECUTE 'CREATE INDEX tmp_av_inventory_storeid_' || pid::TEXT || ' ON ' || tmp_inv_tablename || '(store_id)';

	rental_start = now();
	rental_range = tstzrange(now(),now()+rental_interval);

	IF EXISTS (SELECT 1 FROM bluebox.holiday WHERE holiday_date::timestamptz <@ rental_range) THEN 
		SELECT pct INTO cust_percent FROM random_between(cust_percent,cust_percent*holiday_multiplier,3) x(pct);
	END IF;
	
		-- Get a list of inventory that is currently on loan as of the rental_start day
		-- For new rentals this is a bit faulty as the "rental_start" is a single timestamp
		-- but the start time 
		sqlstr := FORMAT($$WITH outstanding_rentals AS (
			SELECT * FROM bluebox.rental
			WHERE rental_period @> %3$L
		),
		-- get a list of inventory that is available
		available_inventory AS (
			INSERT INTO  %1$I --tmp_av_inventory
			SELECT i.* FROM bluebox.inventory i
				LEFT JOIN outstanding_rentals o using(inventory_id)
			WHERE o.inventory_id IS NULL
		)
		-- get a list of customers that do not currently have a video on loan
		-- as of this time
		INSERT INTO %2$I --tmp_av_customer
		SELECT c.* FROM bluebox.customer c
		 	LEFT JOIN outstanding_rentals o using(customer_id)
		WHERE o.customer_id IS NULL
			AND c.activebool IS TRUE;
		$$,tmp_inv_tablename, tmp_cust_tablename, rental_range);
		
		--RAISE NOTICE '%',sqlstr;
	
		EXECUTE sqlstr;
	
		-- sample 0.01% of the rows from available customers for the given day 
		-- loop over them and
	 	FOR cus IN EXECUTE FORMAT('SELECT customer_id, store_id FROM %1$I TABLESAMPLE bernoulli(%2$L)',tmp_cust_tablename,cust_percent)
	 	LOOP
		 	-- This is not efficient on larger tables. For a small table like this
		 	-- using 'random()' to order is faster and easier than a multi-step search
		 	WITH store_inv AS (
				SELECT s.store_id, ST_Distance(s.geog,c.geog) dist FROM bluebox.store s,
					bluebox.customer c
				WHERE ST_DWithin(s.geog,c.geog,max_store_dist)
					AND c.customer_id = cus.customer_id
				ORDER BY random()
				LIMIT 1
			)
			SELECT store_id INTO cus.store_id FROM store_inv;
		 	
		 	EXECUTE FORMAT($$SELECT inventory_id FROM %1$I 
		 		WHERE inventory_id NOT IN (SELECT UNNEST(%2$L::int[]))
		 			AND store_id = %3$s
		 		ORDER BY random()
		 		LIMIT 1$$,tmp_inv_tablename,a_inv,cus.store_id) INTO c_inv;
		 	
		 	--RAISE NOTICE 'customer_id: %, inventory_id: %, a_inv: %',cus.customer_id, c_inv, a_inv;
		 	
		 	sqlstr := FORMAT($$INSERT INTO bluebox.rental (rental_period, inventory_id, customer_id, store_id)
			 	VALUES (tstzrange((%1$L::timestamptz + trunc(random() * 300) * '1 second'::INTERVAL),NULL),
					%2$s,
					%3$s,
					%4$s) 
					$$,rental_start,c_inv,cus.customer_id,cus.store_id); 
					
 			RAISE NOTICE '%',sqlstr;				
			EXECUTE sqlstr;
 			COMMIT;
		
			a_inv := array_append(a_inv, c_inv);
			
	 	end LOOP;
	 	--RAISE NOTICE '%',sqlstr;
	 	--EXECUTE sqlstr;
	 
		EXECUTE 'DROP TABLE ' || tmp_cust_tablename;
		EXECUTE 'DROP TABLE ' || tmp_inv_tablename; 

 END;
$_$;
ALTER PROCEDURE bluebox.generate_new_rentals(IN rental_interval interval, IN cust_percent real, IN holiday_multiplier real, IN max_store_dist integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.generate_individual_rental(integer)...';END$$;
CREATE PROCEDURE bluebox.generate_individual_rental(IN max_store_dist integer DEFAULT 25000)
LANGUAGE plpgsql
AS $_$
 DECLARE cus record;
	c_id int;
	c_sid int;
	inv_id int;
	rental_start timestamptz;
    rental_nextday timestamptz;
    rental_range tstzrange;
	sqlstr TEXT;
	pid int;
	tmp_cust_tablename TEXT;
	tmp_inv_tablename TEXT;
 BEGIN

	rental_start = now();
	
	-- Get a random customer to rent a movie for
	SELECT customer_id INTO c_id FROM customer 
		WHERE customer_id NOT IN (SELECT customer_id from rental WHERE rental_period @> rental_start)
		ORDER BY random()
		LIMIT 1;
	
	
	WITH rental_store AS (
		SELECT s.store_id, ST_Distance(s.geog,c.geog) dist FROM bluebox.store s,
			bluebox.customer c
		WHERE ST_DWithin(s.geog,c.geog,max_store_dist)
			AND c.customer_id = c_id
		ORDER BY random()
		LIMIT 1
	)
	SELECT store_id INTO c_sid FROM rental_store;
	 	
 	SELECT inventory_id INTO inv_id FROM inventory
 		WHERE inventory_id NOT IN (SELECT inventory_id FROM rental WHERE rental_period @> rental_start)
 			AND store_id = c_sid
 		ORDER BY random()
 		LIMIT 1;
	 	
	IF (inv_id IS NOT NULL) THEN  	
		INSERT INTO bluebox.rental (rental_period, inventory_id, customer_id, store_id)
			 	VALUES (tstzrange(rental_start,NULL),
					inv_id,
					c_id,
					c_sid); 
	END IF;

	COMMIT;	
 END;
$_$;
ALTER PROCEDURE bluebox.generate_individual_rental(IN max_store_dist integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.complete_recent_rentals(interval, integer)...';END$$;
CREATE PROCEDURE bluebox.complete_recent_rentals(IN min_rental_interval interval DEFAULT '24:00:00'::interval, IN max_store_dist integer DEFAULT 25000)
LANGUAGE plpgsql
AS $_$
 DECLARE 
	pid int;
 	rid int;
	cus_id int;
	inv_id int;
	sid int;
	r_sid int;
	tmp_rental_tablename TEXT;
	sqlstr TEXT;
 BEGIN
	 
	SELECT pg_backend_pid() INTO pid; 
	
	tmp_rental_tablename = 'tmp_open_rentals_' || pid::TEXT;
 
	RAISE NOTICE '%',tmp_rental_tablename;

	EXECUTE FORMAT($$CREATE TEMPORARY TABLE %1$I (
		rental_id int,
		customer_id int,
		inventory_id int,
		store_id int
	);$$,tmp_rental_tablename);


	EXECUTE FORMAT($$INSERT INTO %1$I 
	SELECT rental_id, customer_id, inventory_id, store_id FROM bluebox.rental WHERE upper(rental_period) IS NULL 
		AND lower(rental_period) < now()-%2$L::INTERVAL;$$,tmp_rental_tablename,min_rental_interval);


	EXECUTE 'ANALYZE ' || tmp_rental_tablename;
	-- sample 0.01% of the rows from available customers for the given day 
	-- loop over them and

	FOR rid,cus_id,inv_id,r_sid IN EXECUTE FORMAT('SELECT rental_id, customer_id, inventory_id,store_id FROM %1$I TABLESAMPLE bernoulli(random_between(10,20,1))',tmp_rental_tablename)
 	LOOP
	 	-- update the rental end period to be between 16 hours and 4 days from initial rental.
	 	-- end the rental between 16 hours and 96 hours after start
	 	UPDATE bluebox.rental SET rental_period = tstzrange(lower(rental_period), (lower(rental_period) + (random_between(57600,345600)::TEXT || ' seconds')::INTERVAL))
	 	WHERE rental_id = rid;
	 
	 	-- Find a store that's within the specified distance. This will give some randomness
	 	-- to the rental locations for each customer
	 	WITH store_inv AS (
			SELECT s.store_id, ST_Distance(s.geog,cus.geog) dist FROM bluebox.store s,
				bluebox.customer cus
			WHERE ST_DWithin(s.geog,cus.geog,max_store_dist)
				AND cus.customer_id = cus_id
			ORDER BY random()
			LIMIT 1
		)
		SELECT store_id INTO sid FROM store_inv;
	
		IF sid IS NULL THEN
			sid := r_sid;
		END IF;
	
        UPDATE bluebox.inventory SET store_id = sid
		WHERE inventory_id = inv_id; 
		
		COMMIT;
		
		sid:=NULL;
	
		CALL bluebox.insert_single_payment(rid);
		
 	end LOOP;	 
	 
 	EXECUTE 'DROP TABLE ' || tmp_rental_tablename;


 END;
$_$;
ALTER PROCEDURE bluebox.complete_recent_rentals(IN min_rental_interval interval, IN max_store_dist integer) OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.add_new_inventory()...';END$$;
CREATE PROCEDURE bluebox.add_new_inventory()
LANGUAGE plpgsql
AS $_$
DECLARE
	storeid int;
	maxrd date;
BEGIN 
	/*
 * This query was a first attempt to fill the inventory
 * table with some kind relevance - ie. newer, popular movies
 * get more copies than older or less popular movies.
 */
	FOR storeid IN SELECT store_id FROM bluebox.store
	LOOP
		SELECT max(release_date) INTO maxrd FROM bluebox.inventory i
			JOIN bluebox.film f USING(film_id)
		WHERE store_id=storeid;
		
		WITH inventory_tmp (film_id, popularity, total_i, release_date) AS (
			SELECT f.film_id, f.popularity, CASE
				WHEN f.popularity <= 20 THEN ARRAY[0,2]
				WHEN f.popularity BETWEEN 20 AND 35 THEN ARRAY[0,2]
				WHEN f.popularity BETWEEN 35 AND 75 THEN ARRAY[1,3]
				WHEN f.popularity BETWEEN 75 AND 100 THEN ARRAY[2,6]
				WHEN f.popularity BETWEEN 100 AND 500 THEN ARRAY[3,6]
				WHEN f.popularity >500 THEN ARRAY[6,10]
				END,
				release_date
			FROM bluebox.film f
				WHERE film_id NOT IN (SELECT count(DISTINCT film_id) FROM bluebox.inventory WHERE store_id=storeid)
					AND release_date > maxrd
		),
		adjusted_inventory AS (
			SELECT it.film_id, it.popularity, 
			CASE 
				WHEN release_date > now()-'1 year'::INTERVAL THEN it.total_i
				WHEN release_date BETWEEN now()-'3 years'::INTERVAL AND now()-'1 year'::INTERVAL THEN
					array_agg(greatest(val-1,0))
				WHEN release_date BETWEEN now()-'4 years'::INTERVAL AND now()-'3 year'::INTERVAL THEN
					array_agg(greatest(val-2,0))
				WHEN release_date < now()-'3 years'::INTERVAL THEN
					array_agg(greatest(val-3,0))
			END AS total_i
			FROM inventory_tmp it, unnest(it.total_i) AS val
			GROUP BY it.film_id, it.popularity, it.release_date, it.total_i
		)
--		SELECT * FROM adjusted_inventory;
		INSERT INTO bluebox.inventory (film_id, store_id)
		SELECT film_id, storeid
		FROM adjusted_inventory ai, random_between(ai.total_i[1],ai.total_i[2]) x(i), generate_series(1,x.i)
		WHERE x.i>0;

	COMMIT;
	END LOOP;
END;
$_$;
ALTER PROCEDURE bluebox.add_new_inventory() OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.store.store_zip_code_fkey...';END$$;
ALTER TABLE bluebox.store ADD CONSTRAINT store_zip_code_fkey FOREIGN KEY (zip_code) REFERENCES bluebox.zip_code_info (zip_code);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental.rental_customer_id_fkey...';END$$;
ALTER TABLE bluebox.rental ADD CONSTRAINT rental_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES bluebox.customer (customer_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_production_company.film_production_company_production_company_id_fkey...';END$$;
ALTER TABLE bluebox.film_production_company ADD CONSTRAINT film_production_company_production_company_id_fkey FOREIGN KEY (production_company_id) REFERENCES bluebox.production_company (production_company_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_crew.film_crew_person_id_fkey...';END$$;
ALTER TABLE bluebox.film_crew ADD CONSTRAINT film_crew_person_id_fkey FOREIGN KEY (person_id) REFERENCES bluebox.person (person_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_cast.film_cast_person_id_fkey...';END$$;
ALTER TABLE bluebox.film_cast ADD CONSTRAINT film_cast_person_id_fkey FOREIGN KEY (person_id) REFERENCES bluebox.person (person_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.customer.customer_zip_code_fkey...';END$$;
ALTER TABLE bluebox.customer ADD CONSTRAINT customer_zip_code_fkey FOREIGN KEY (zip_code) REFERENCES bluebox.zip_code_info (zip_code);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.customer.customer_store_id_fkey...';END$$;
ALTER TABLE bluebox.customer ADD CONSTRAINT customer_store_id_fkey FOREIGN KEY (store_id) REFERENCES bluebox.store (store_id) ON DELETE SET NULL;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.store_store_id_seq...';END$$;
CREATE SEQUENCE public.store_store_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.store_store_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.staff_staff_id_seq...';END$$;
CREATE SEQUENCE public.staff_staff_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.staff_staff_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.staff...';END$$;
CREATE TABLE bluebox.staff (
    staff_id integer NOT NULL DEFAULT nextval('public.staff_staff_id_seq'::regclass),
    first_name text NOT NULL,
    last_name text NOT NULL,
    address_id integer NOT NULL,
    email text,
    store_id integer NOT NULL,
    active boolean NOT NULL DEFAULT true,
    username text NOT NULL,
    password text,
    last_update timestamp with time zone NOT NULL DEFAULT now(),
    picture bytea
);
ALTER TABLE bluebox.staff OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.rental_rental_id_seq...';END$$;
CREATE SEQUENCE public.rental_rental_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.rental_rental_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.payment_payment_id_seq...';END$$;
CREATE SEQUENCE public.payment_payment_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.payment_payment_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.payment...';END$$;
CREATE TABLE bluebox.payment (
    payment_id integer NOT NULL DEFAULT nextval('public.payment_payment_id_seq'::regclass),
    customer_id integer NOT NULL,
    rental_id integer NOT NULL,
    amount numeric(5,2) NOT NULL,
    payment_date timestamp with time zone NOT NULL
);
ALTER TABLE bluebox.payment ADD CONSTRAINT payment_bak_pkey PRIMARY KEY (payment_date, payment_id);
ALTER TABLE bluebox.payment OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.payment.payment_rental_id_fkey...';END$$;
ALTER TABLE bluebox.payment ADD CONSTRAINT payment_rental_id_fkey FOREIGN KEY (rental_id) REFERENCES bluebox.rental (rental_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.payment.payment_customer_id_fkey...';END$$;
ALTER TABLE bluebox.payment ADD CONSTRAINT payment_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES bluebox.customer (customer_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.language_language_id_seq...';END$$;
CREATE SEQUENCE public.language_language_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.language_language_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.language...';END$$;
CREATE TABLE bluebox.language (
    language_id integer NOT NULL DEFAULT nextval('public.language_language_id_seq'::regclass),
    name character(20) NOT NULL,
    last_update timestamp with time zone NOT NULL DEFAULT now()
);
ALTER TABLE bluebox.language OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.inventory_inventory_id_seq...';END$$;
CREATE SEQUENCE public.inventory_inventory_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.inventory_inventory_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.inventory...';END$$;
CREATE TABLE bluebox.inventory (
    inventory_id integer NOT NULL DEFAULT nextval('public.inventory_inventory_id_seq'::regclass),
    film_id integer NOT NULL,
    store_id integer NOT NULL,
    last_update timestamp with time zone NOT NULL DEFAULT now()
);
ALTER TABLE bluebox.inventory ADD CONSTRAINT inventory_pk PRIMARY KEY (inventory_id);
ALTER TABLE bluebox.inventory OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental.rental_inventory_id_fkey...';END$$;
ALTER TABLE bluebox.rental ADD CONSTRAINT rental_inventory_id_fkey FOREIGN KEY (inventory_id) REFERENCES bluebox.inventory (inventory_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.inventory.inventory_store_id_fkkey...';END$$;
ALTER TABLE bluebox.inventory ADD CONSTRAINT inventory_store_id_fkkey FOREIGN KEY (store_id) REFERENCES bluebox.store (store_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.film_film_id_seq...';END$$;
CREATE SEQUENCE public.film_film_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.film_film_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.customer_customer_id_seq...';END$$;
CREATE SEQUENCE public.customer_customer_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.customer_customer_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.country_country_id_seq...';END$$;
CREATE SEQUENCE public.country_country_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.country_country_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.city_city_id_seq...';END$$;
CREATE SEQUENCE public.city_city_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.city_city_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.category_category_id_seq...';END$$;
CREATE SEQUENCE public.category_category_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.category_category_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.address_address_id_seq...';END$$;
CREATE SEQUENCE public.address_address_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.address_address_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.actor_actor_id_seq...';END$$;
CREATE SEQUENCE public.actor_actor_id_seq
AS bigint
INCREMENT BY 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1
CACHE 1
NO CYCLE;
ALTER SEQUENCE public.actor_actor_id_seq OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.us_postal_code_geog_gix...';END$$;
CREATE INDEX us_postal_code_geog_gix ON bluebox.zip_code_info USING gist (geog);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental_store_id_idx...';END$$;
CREATE INDEX rental_store_id_idx ON bluebox.rental USING btree (store_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental_rental_period_idx...';END$$;
CREATE INDEX rental_rental_period_idx ON bluebox.rental USING gist (rental_period);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental_inventory_id_idx...';END$$;
CREATE INDEX rental_inventory_id_idx ON bluebox.rental USING btree (inventory_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.rental_customer_id_idx...';END$$;
CREATE INDEX rental_customer_id_idx ON bluebox.rental USING btree (customer_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.idx_rental_rental_date_brin...';END$$;
CREATE INDEX idx_rental_rental_date_brin ON bluebox.rental USING brin (lower(rental_period));


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.payment_rental_id_amount_idx...';END$$;
CREATE INDEX payment_rental_id_amount_idx ON bluebox.payment USING btree (rental_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.inventory_store_id_idx...';END$$;
CREATE INDEX inventory_store_id_idx ON bluebox.inventory USING btree (store_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.inventory_film_id_idx...';END$$;
CREATE INDEX inventory_film_id_idx ON bluebox.inventory USING btree (film_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_person_id_film_id_idx...';END$$;
CREATE INDEX film_person_id_film_id_idx ON bluebox.film_cast USING btree (person_id, film_id);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.year...';END$$;
CREATE DOMAIN public.year AS integer;
ALTER DOMAIN public.year OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.mpaa_rating...';END$$;
CREATE TYPE public.mpaa_rating AS ENUM ('G', 'PG', 'PG-13', 'R', 'NC-17', 'NR');
ALTER TYPE public.mpaa_rating OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film...';END$$;
CREATE TABLE bluebox.film (
    film_id bigint NOT NULL,
    title text NOT NULL,
    overview text NOT NULL,
    release_date date,
    genre_ids integer[],
    original_language text,
    rating public.mpaa_rating,
    popularity real,
    vote_count integer,
    vote_average real,
    budget bigint,
    revenue bigint,
    runtime integer,
    fulltext tsvector GENERATED ALWAYS AS (to_tsvector('english'::regconfig, (COALESCE(title, ''::text) || ' '::text) || COALESCE(overview, ''::text))) STORED NULL
);
ALTER TABLE bluebox.film ADD CONSTRAINT film_pkey PRIMARY KEY (film_id);
ALTER TABLE bluebox.film OWNER TO postgres;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.inventory.inventory_film_id_fkey...';END$$;
ALTER TABLE bluebox.inventory ADD CONSTRAINT inventory_film_id_fkey FOREIGN KEY (film_id) REFERENCES bluebox.film (film_id) ON DELETE RESTRICT;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_production_company.film_production_company_film_id_fkey...';END$$;
ALTER TABLE bluebox.film_production_company ADD CONSTRAINT film_production_company_film_id_fkey FOREIGN KEY (film_id) REFERENCES bluebox.film (film_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_crew.film_crew_film_id_fkey...';END$$;
ALTER TABLE bluebox.film_crew ADD CONSTRAINT film_crew_film_id_fkey FOREIGN KEY (film_id) REFERENCES bluebox.film (film_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_cast.film_cast_film_id_fkey...';END$$;
ALTER TABLE bluebox.film_cast ADD CONSTRAINT film_cast_film_id_fkey FOREIGN KEY (film_id) REFERENCES bluebox.film (film_id) ON DELETE CASCADE;


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.idx_title_trgm...';END$$;
CREATE INDEX idx_title_trgm ON bluebox.film USING gin (title  gin_trgm_ops);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_fulltext_idx...';END$$;
CREATE INDEX film_fulltext_idx ON bluebox.film USING gin (fulltext);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating bluebox.film_film_genre_ids_idx...';END$$;
CREATE INDEX film_film_genre_ids_idx ON bluebox.film USING gin (genre_ids);


DO language plpgsql $$BEGIN RAISE NOTICE 'Creating public.bıgınt...';END$$;
CREATE DOMAIN public.bıgınt AS bigint;
ALTER DOMAIN public.bıgınt OWNER TO postgres;

SET check_function_bodies = true;
