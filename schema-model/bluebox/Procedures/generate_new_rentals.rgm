procedure "bluebox"."generate_new_rentals(interval, real, real, integer)" {
  text = """

 DECLARE cus record;
	c_inv int;
	a_inv int[];
	rental_start timestamptz;
    rental_nextday timestamptz;
    rental_range tstzrange;
	sqlstr TEXT;
	pid int;
	tmp_cust_tablename TEXT;
	tmp_inv_tablename TEXT;
 BEGIN

	SELECT pg_backend_pid() INTO pid; 
	
	tmp_cust_tablename = 'tmp_av_customer_' || pid::TEXT;
	tmp_inv_tablename = 'tmp_av_inventory_' || pid::TEXT;
	 
	EXECUTE 'CREATE TEMPORARY TABLE ' || tmp_cust_tablename || ' (LIKE bluebox.customer INCLUDING ALL)';
	EXECUTE 'CREATE TEMPORARY TABLE ' || tmp_inv_tablename || ' (LIKE bluebox.inventory INCLUDING ALL)';
	EXECUTE 'CREATE INDEX tmp_av_inventory_id_' || pid::TEXT || ' ON ' || tmp_inv_tablename || '(inventory_id)';
	EXECUTE 'CREATE INDEX tmp_av_inventory_storeid_' || pid::TEXT || ' ON ' || tmp_inv_tablename || '(store_id)';

	rental_start = now();
	rental_range = tstzrange(now(),now()+rental_interval);

	IF EXISTS (SELECT 1 FROM bluebox.holiday WHERE holiday_date::timestamptz <@ rental_range) THEN 
		SELECT pct INTO cust_percent FROM random_between(cust_percent,cust_percent*holiday_multiplier,3) x(pct);
	END IF;
	
		-- Get a list of inventory that is currently on loan as of the rental_start day
		-- For new rentals this is a bit faulty as the "rental_start" is a single timestamp
		-- but the start time 
		sqlstr := FORMAT($$WITH outstanding_rentals AS (
			SELECT * FROM bluebox.rental
			WHERE rental_period @> %3$L
		),
		-- get a list of inventory that is available
		available_inventory AS (
			INSERT INTO  %1$I --tmp_av_inventory
			SELECT i.* FROM bluebox.inventory i
				LEFT JOIN outstanding_rentals o using(inventory_id)
			WHERE o.inventory_id IS NULL
		)
		-- get a list of customers that do not currently have a video on loan
		-- as of this time
		INSERT INTO %2$I --tmp_av_customer
		SELECT c.* FROM bluebox.customer c
		 	LEFT JOIN outstanding_rentals o using(customer_id)
		WHERE o.customer_id IS NULL
			AND c.activebool IS TRUE;
		$$,tmp_inv_tablename, tmp_cust_tablename, rental_range);
		
		--RAISE NOTICE '%',sqlstr;
	
		EXECUTE sqlstr;
	
		-- sample 0.01% of the rows from available customers for the given day 
		-- loop over them and
	 	FOR cus IN EXECUTE FORMAT('SELECT customer_id, store_id FROM %1$I TABLESAMPLE bernoulli(%2$L)',tmp_cust_tablename,cust_percent)
	 	LOOP
		 	-- This is not efficient on larger tables. For a small table like this
		 	-- using 'random()' to order is faster and easier than a multi-step search
		 	WITH store_inv AS (
				SELECT s.store_id, ST_Distance(s.geog,c.geog) dist FROM bluebox.store s,
					bluebox.customer c
				WHERE ST_DWithin(s.geog,c.geog,max_store_dist)
					AND c.customer_id = cus.customer_id
				ORDER BY random()
				LIMIT 1
			)
			SELECT store_id INTO cus.store_id FROM store_inv;
		 	
		 	EXECUTE FORMAT($$SELECT inventory_id FROM %1$I 
		 		WHERE inventory_id NOT IN (SELECT UNNEST(%2$L::int[]))
		 			AND store_id = %3$s
		 		ORDER BY random()
		 		LIMIT 1$$,tmp_inv_tablename,a_inv,cus.store_id) INTO c_inv;
		 	
		 	--RAISE NOTICE 'customer_id: %, inventory_id: %, a_inv: %',cus.customer_id, c_inv, a_inv;
		 	
		 	sqlstr := FORMAT($$INSERT INTO bluebox.rental (rental_period, inventory_id, customer_id, store_id)
			 	VALUES (tstzrange((%1$L::timestamptz + trunc(random() * 300) * '1 second'::INTERVAL),NULL),
					%2$s,
					%3$s,
					%4$s) 
					$$,rental_start,c_inv,cus.customer_id,cus.store_id); 
					
 			RAISE NOTICE '%',sqlstr;				
			EXECUTE sqlstr;
 			COMMIT;
		
			a_inv := array_append(a_inv, c_inv);
			
	 	end LOOP;
	 	--RAISE NOTICE '%',sqlstr;
	 	--EXECUTE sqlstr;
	 
		EXECUTE 'DROP TABLE ' || tmp_cust_tablename;
		EXECUTE 'DROP TABLE ' || tmp_inv_tablename; 

 END;
"""
  arguments = <
    {
      name = rental_interval
      type = interval
      mode = IN
      default = '00:05:00'::interval
    }

    {
      name = cust_percent
      type = real
      mode = IN
      default = 0.025
    }

    {
      name = holiday_multiplier
      type = real
      mode = IN
      default = 2.5
    }

    {
      name = max_store_dist
      type = integer
      mode = IN
      default = 25000
    }

  >
  language = plpgsql
  owner = postgres
}

